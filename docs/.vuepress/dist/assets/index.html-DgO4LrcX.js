import{_ as s,c as t,a as r,b as e,d as i,w as h,r as l,o as c,e as d}from"./app-CE00KErn.js";const o={};function p(u,a){const n=l("RouteLink");return c(),t("div",null,[a[1]||(a[1]=r('<h1 id="📝-顺序结构" tabindex="-1"><a class="header-anchor" href="#📝-顺序结构"><span>📝 顺序结构</span></a></h1><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>顺序结构是程序设计中最基本的结构，程序按照代码的书写顺序从上到下依次执行每条语句。这是我们学习编程的起点，也是其他复杂结构的基础。</p><h2 id="🎯-学习目标" tabindex="-1"><a class="header-anchor" href="#🎯-学习目标"><span>🎯 学习目标</span></a></h2><ul><li>理解顺序结构的执行特点</li><li>掌握C++程序的基本框架</li><li>学会使用输入输出语句</li><li>能够编写简单的顺序结构程序</li></ul><h2 id="📋-基本特征" tabindex="-1"><a class="header-anchor" href="#📋-基本特征"><span>📋 基本特征</span></a></h2><h3 id="_1-顺序执行" tabindex="-1"><a class="header-anchor" href="#_1-顺序执行"><span>1. 顺序执行</span></a></h3><p>程序从<code>main()</code>函数开始，按照语句的书写顺序依次执行，直到程序结束。</p><h3 id="_2-无分支" tabindex="-1"><a class="header-anchor" href="#_2-无分支"><span>2. 无分支</span></a></h3><p>程序执行路径唯一，不会根据条件选择不同的执行分支。</p><h3 id="_3-无循环" tabindex="-1"><a class="header-anchor" href="#_3-无循环"><span>3. 无循环</span></a></h3><p>每条语句只执行一次，不会重复执行某段代码。</p><h2 id="💻-基本程序结构" tabindex="-1"><a class="header-anchor" href="#💻-基本程序结构"><span>💻 基本程序结构</span></a></h2>',13)),e("ul",null,[e("li",null,[i(n,{to:"/basic-syntax/sequential-structure/sequential-structure/a+b+problem.html"},{default:h(()=>a[0]||(a[0]=[d("A+B问题")])),_:1,__:[0]})])])])}const f=s(o,[["render",p]]),b=JSON.parse('{"path":"/basic-syntax/sequential-structure/","title":"📝 顺序结构","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1753096099000,"contributors":[{"name":"AzenAnn","username":"AzenAnn","email":"annan2@mail2.sysu.edu.cn","commits":1,"url":"https://github.com/AzenAnn"}],"changelog":[{"hash":"2d66fcefd0ab38170527c954f0efd63b12d36117","time":1753096099000,"email":"annan2@mail2.sysu.edu.cn","author":"AzenAnn","message":"第一次博客提交"}]},"filePathRelative":"basic-syntax/sequential-structure/README.md"}');export{f as comp,b as data};
