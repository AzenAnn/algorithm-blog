import{_ as s,c as a,b as t,o as p}from"./app-CtoChMxC.js";const e={};function o(l,n){return p(),a("div",null,n[0]||(n[0]=[t(`<h1 id="顺序程序设计-算法竞赛新手的第一堂课" tabindex="-1"><a class="header-anchor" href="#顺序程序设计-算法竞赛新手的第一堂课"><span>顺序程序设计：算法竞赛新手的第一堂课</span></a></h1><h2 id="什么是顺序程序设计" tabindex="-1"><a class="header-anchor" href="#什么是顺序程序设计"><span>什么是顺序程序设计？</span></a></h2><p>想象一下，你在做一道数学题：先读题目，然后计算，最后写答案。这就是顺序程序设计的精髓——<strong>从上到下，一步一步执行</strong>。就像排队买奶茶一样，先来先服务，井井有条！</p><h2 id="c-c-语言基本概念" tabindex="-1"><a class="header-anchor" href="#c-c-语言基本概念"><span>C/C++语言基本概念</span></a></h2><h3 id="c语言-vs-c-兄弟俩的故事" tabindex="-1"><a class="header-anchor" href="#c语言-vs-c-兄弟俩的故事"><span>C语言 vs C++：兄弟俩的故事</span></a></h3><p><strong>C语言</strong>就像是一个严肃的老大哥，做事直接了当，专注于解决问题。而 <strong>C++</strong> 则是在老大哥基础上成长起来的小弟，不仅继承了老大哥的优点，还具备了更多技能（面向对象编程）。算法竞赛中的语言知识主要是使用了C和C++中的STL</p><h2 id="程序骨架-你的第一个-hello-world" tabindex="-1"><a class="header-anchor" href="#程序骨架-你的第一个-hello-world"><span><strong>程序骨架：你的第一个“Hello World”</strong></span></a></h2><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是大部分C语言程序设计和算法竞赛书籍会出现的第一个C语言的程序。</p><p>解开发现他会包含一下几个部分：</p><p>1、头文件 <em>#include&lt;stdio.h&gt;</em></p><p>2、主函数 <em>main</em></p><p>3、函数语句 <em>printf</em></p><p>4、其他...</p><p>事实上，如果是在算法竞赛中，我们会对上述几个部分进行修改，例如：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span></span>
<span class="line"><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span>  ios_base<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    cout<span class="token operator">&lt;&lt;</span><span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的头文件换成了竞赛的万能头，并且使用了标准命名空间，在主函数中，取消了同步流，这可以使得cin更加迅速。</p><h2 id="📝-c语言格式化输入输出" tabindex="-1"><a class="header-anchor" href="#📝-c语言格式化输入输出"><span>📝 C语言格式化输入输出</span></a></h2><h3 id="scanf函数" tabindex="-1"><a class="header-anchor" href="#scanf函数"><span>scanf函数</span></a></h3><p>scanf函数称为格式输入函数，即按照格式字符串的格式，从键盘上把数据输入到指定的变量之中。<a href="https://www.runoob.com/cprogramming/c-function-scanf.html" target="_blank" rel="noopener noreferrer">C语言scanf函数详解</a></p><p><strong>基本语法格式：</strong></p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">int</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>format<span class="token punctuation">,</span> 地址列表<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>重要语法要点：</strong></p><ul><li><p>格式控制字符串：指定输入数据的类型和格式</p></li><li><p>地址列表：变量的地址，用<code>&amp;</code>运算符获取</p></li><li><p>返回值：成功读取的数据项个数</p></li></ul><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">float</span> f<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">char</span> c<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;请输入两个整数：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 注意&amp;符号！</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;请输入一个浮点数：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%f&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;请输入一个字符：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot; %c&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 注意%c前的空格，用来跳过前面的换行符</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;结果：%d + %d = %d, 浮点数=%f, 字符=%c\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> a<span class="token operator">+</span>b<span class="token punctuation">,</span> f<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="printf函数" tabindex="-1"><a class="header-anchor" href="#printf函数"><span>printf函数</span></a></h3><p>printf函数发送格式化输出到标准输出stdout。<a href="https://www.runoob.com/cprogramming/c-function-printf.html" target="_blank" rel="noopener noreferrer">C语言printf函数详解</a></p><p><strong>基本语法格式：</strong></p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">int</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>format<span class="token punctuation">,</span> 参数列表<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="完整的格式说明符表格" tabindex="-1"><a class="header-anchor" href="#完整的格式说明符表格"><span>完整的格式说明符表格</span></a></h3><p>C语言printf格式控制符包含转换说明符、宽度控制、精度控制等多种功能：<a href="https://blog.csdn.net/cnds123/article/details/121372599" target="_blank" rel="noopener noreferrer">格式控制符详解</a></p><table><thead><tr><th>格式说明符</th><th>数据类型</th><th>说明</th><th>示例输出</th></tr></thead><tbody><tr><td><code>%d</code></td><td>int</td><td>十进制整数</td><td><code>123</code></td></tr><tr><td><code>%u</code></td><td>unsigned int</td><td>无符号十进制整数</td><td><code>123</code></td></tr><tr><td><code>%o</code></td><td>int</td><td>八进制整数</td><td><code>173</code></td></tr><tr><td><code>%x</code></td><td>int</td><td>十六进制整数(小写)</td><td><code>7b</code></td></tr><tr><td><code>%X</code></td><td>int</td><td>十六进制整数(大写)</td><td><code>7B</code></td></tr><tr><td><code>%f</code></td><td>float/double</td><td>浮点数</td><td><code>3.141593</code></td></tr><tr><td><code>%e</code></td><td>float/double</td><td>科学计数法(小写e)</td><td><code>3.141593e+00</code></td></tr><tr><td><code>%E</code></td><td>float/double</td><td>科学计数法(大写E)</td><td><code>3.141593E+00</code></td></tr><tr><td><code>%g</code></td><td>float/double</td><td>自动选择%f或%e</td><td><code>3.14159</code></td></tr><tr><td><code>%G</code></td><td>float/double</td><td>自动选择%f或%E</td><td><code>3.14159</code></td></tr><tr><td><code>%c</code></td><td>char</td><td>字符</td><td><code>A</code></td></tr><tr><td><code>%s</code></td><td>char*</td><td>字符串</td><td><code>Hello</code></td></tr><tr><td><code>%p</code></td><td>void*</td><td>指针地址</td><td><code>0x7ffee2b0</code></td></tr><tr><td><code>%%</code></td><td>-</td><td>输出%号本身</td><td><code>%</code></td></tr></tbody></table><p>scanf 和 printf 的格式符大致上是一样的，需要注意一下几个点：</p><p><strong>注意</strong>：</p><ul><li><p><strong><code>printf</code>输出浮点数</strong>：<code>%f</code>通吃<code>float</code>/<code>double</code></p></li><li><p><strong><code>scanf</code>输入浮点数</strong>：<code>float</code>→<code>%f</code>，<code>double</code>→<code>%lf</code></p></li><li><p><strong><code>long long</code></strong>：统一用<code>%lld</code></p></li><li><p><strong><code>%c</code>前加空格</strong> → <code>&quot; %c&quot;</code>防回车偷袭！</p></li></ul><p><strong>高级格式控制：</strong></p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%5d&quot;</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 输出宽度为5：  123</span></span>
<span class="line"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%-5d&quot;</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 左对齐：123  </span></span>
<span class="line"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%05d&quot;</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 用0填充：00123</span></span>
<span class="line"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%.2f&quot;</span><span class="token punctuation">,</span> <span class="token number">3.14159</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 保留2位小数：3.14</span></span>
<span class="line"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%8.2f&quot;</span><span class="token punctuation">,</span> <span class="token number">3.14159</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 宽度8，精度2： 3.14</span></span>
<span class="line"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%+d&quot;</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 显示符号：+123</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="🎨-c-风格输入输出" tabindex="-1"><a class="header-anchor" href="#🎨-c-风格输入输出"><span>🎨 C++风格输入输出</span></a></h2><h3 id="cin和cout基本用法" tabindex="-1"><a class="header-anchor" href="#cin和cout基本用法"><span>cin和cout基本用法</span></a></h3><p>C++的I/O发生在流中，cin是标准输入流，cout是标准输出流：<a href="https://www.runoob.com/cplusplus/cpp-basic-input-output.html" target="_blank" rel="noopener noreferrer">C++基本输入输出</a></p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span></span>
<span class="line"><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">float</span> f<span class="token punctuation">;</span></span>
<span class="line">    string name<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;请输入两个整数：&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b<span class="token punctuation">;</span>  <span class="token comment">// 箭头方向表示数据流向</span></span>
<span class="line"></span>
<span class="line">    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;请输入一个浮点数：&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    cin <span class="token operator">&gt;&gt;</span> f<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;请输入你的姓名：&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    cin <span class="token operator">&gt;&gt;</span> name<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;结果：&quot;</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; + &quot;</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; = &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;浮点数：&quot;</span> <span class="token operator">&lt;&lt;</span> f <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;你好，&quot;</span> <span class="token operator">&lt;&lt;</span> name <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;！&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="iomanip库-格式控制" tabindex="-1"><a class="header-anchor" href="#iomanip库-格式控制"><span>iomanip库：格式控制</span></a></h3><p>iomanip头文件提供了丰富的格式操控函数：<a href="https://www.geeksforgeeks.org/iomanip-in-cpp/" target="_blank" rel="noopener noreferrer">iomanip详解</a></p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iomanip&gt;</span></span></span>
<span class="line"><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">double</span> pi <span class="token operator">=</span> <span class="token number">3.141592653589793</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 精度控制</span></span>
<span class="line">    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;默认精度：&quot;</span> <span class="token operator">&lt;&lt;</span> pi <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;设置精度为3：&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token function">setprecision</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> pi <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 固定小数点格式</span></span>
<span class="line">    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;固定小数点：&quot;</span> <span class="token operator">&lt;&lt;</span> fixed <span class="token operator">&lt;&lt;</span> <span class="token function">setprecision</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> pi <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 科学计数法</span></span>
<span class="line">    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;科学计数法：&quot;</span> <span class="token operator">&lt;&lt;</span> scientific <span class="token operator">&lt;&lt;</span> pi <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 宽度和填充</span></span>
<span class="line">    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;设置宽度10：&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> num <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;用*填充：&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token function">setfill</span><span class="token punctuation">(</span><span class="token char">&#39;*&#39;</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> num <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 进制控制</span></span>
<span class="line">    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;十进制：&quot;</span> <span class="token operator">&lt;&lt;</span> dec <span class="token operator">&lt;&lt;</span> num <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;八进制：&quot;</span> <span class="token operator">&lt;&lt;</span> oct <span class="token operator">&lt;&lt;</span> num <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;十六进制：&quot;</span> <span class="token operator">&lt;&lt;</span> hex <span class="token operator">&lt;&lt;</span> num <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 显示进制前缀</span></span>
<span class="line">    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;显示前缀：&quot;</span> <span class="token operator">&lt;&lt;</span> showbase <span class="token operator">&lt;&lt;</span> hex <span class="token operator">&lt;&lt;</span> num <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="常用iomanip操控函数表" tabindex="-1"><a class="header-anchor" href="#常用iomanip操控函数表"><span>常用iomanip操控函数表</span></a></h3><table><thead><tr><th>函数</th><th>功能</th><th>示例</th></tr></thead><tbody><tr><td><code>setprecision(n)</code></td><td>设置浮点数精度</td><td><code>setprecision(3)</code></td></tr><tr><td><code>setw(n)</code></td><td>设置字段宽度</td><td><code>setw(10)</code></td></tr><tr><td><code>setfill(c)</code></td><td>设置填充字符</td><td><code>setfill(&#39;0&#39;)</code></td></tr><tr><td><code>fixed</code></td><td>固定小数点格式</td><td><code>fixed</code></td></tr><tr><td><code>scientific</code></td><td>科学计数法格式</td><td><code>scientific</code></td></tr><tr><td><code>left</code></td><td>左对齐</td><td><code>left</code></td></tr><tr><td><code>right</code></td><td>右对齐</td><td><code>right</code></td></tr><tr><td><code>showbase</code></td><td>显示进制前缀</td><td><code>showbase</code></td></tr><tr><td><code>showpos</code></td><td>显示正号</td><td><code>showpos</code></td></tr><tr><td><code>uppercase</code></td><td>十六进制字母大写</td><td><code>uppercase</code></td></tr><tr><td><code>dec</code></td><td>十进制输出</td><td><code>dec</code></td></tr><tr><td><code>oct</code></td><td>八进制输出</td><td><code>oct</code></td></tr><tr><td><code>hex</code></td><td>十六进制输出</td><td><code>hex</code></td></tr></tbody></table><h2 id="🧮-表达式与运算符" tabindex="-1"><a class="header-anchor" href="#🧮-表达式与运算符"><span>🧮 表达式与运算符</span></a></h2><h3 id="基本运算符家族" tabindex="-1"><a class="header-anchor" href="#基本运算符家族"><span>基本运算符家族</span></a></h3><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span></span>
<span class="line">cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;加法：&quot;</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">+</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">// 13</span></span>
<span class="line">cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;减法：&quot;</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">-</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">// 7</span></span>
<span class="line">cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;乘法：&quot;</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">*</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">// 30</span></span>
<span class="line">cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;除法：&quot;</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">/</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">// 3 (整数除法)</span></span>
<span class="line">cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;取余：&quot;</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">%</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">// 1</span></span>
<span class="line">cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;浮点除法：&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>a <span class="token operator">/</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token comment">// 3.33333</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="自增自减-程序员的懒人神器" tabindex="-1"><a class="header-anchor" href="#自增自减-程序员的懒人神器"><span>自增自减：程序员的懒人神器</span></a></h3><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span></span>
<span class="line">cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;原始值：&quot;</span> <span class="token operator">&lt;&lt;</span> count <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token comment">// 5</span></span>
<span class="line">cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;后缀++：&quot;</span> <span class="token operator">&lt;&lt;</span> count<span class="token operator">++</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>      <span class="token comment">// 5 (先使用再加)</span></span>
<span class="line">cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;现在值：&quot;</span> <span class="token operator">&lt;&lt;</span> count <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token comment">// 6</span></span>
<span class="line">cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;前缀++：&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">++</span>count <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>      <span class="token comment">// 7 (先加再使用)</span></span>
<span class="line">cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;前缀--：&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">--</span>count <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>      <span class="token comment">// 6 (先减再使用)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="复合赋值运算符" tabindex="-1"><a class="header-anchor" href="#复合赋值运算符"><span>复合赋值运算符</span></a></h3><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token keyword">int</span> score <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span></span>
<span class="line">score <span class="token operator">+=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token comment">// score = score + 10; 现在是110</span></span>
<span class="line">score <span class="token operator">-=</span> <span class="token number">5</span><span class="token punctuation">;</span>     <span class="token comment">// score = score - 5;  现在是105</span></span>
<span class="line">score <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span>     <span class="token comment">// score = score * 2;  现在是210</span></span>
<span class="line">score <span class="token operator">/=</span> <span class="token number">3</span><span class="token punctuation">;</span>     <span class="token comment">// score = score / 3;  现在是70</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="🧠-c-c-数据类型与类型转换完全指南" tabindex="-1"><a class="header-anchor" href="#🧠-c-c-数据类型与类型转换完全指南"><span>🧠 C/C++ 数据类型与类型转换完全指南</span></a></h2><blockquote><p><strong>“数据类型是程序的DNA——理解它，你就能掌控代码的遗传密码！”</strong></p></blockquote><p>下面将全面解析C/C++的数据类型系统及转换机制，涵盖<strong>基本数据类型</strong>、<strong>派生类型</strong>、<strong>隐式/显式转换</strong>及<strong>实战避坑指南</strong>。</p><hr><h3 id="一、c-c-数据类型全景图" tabindex="-1"><a class="header-anchor" href="#一、c-c-数据类型全景图"><span>一、C/C++ 数据类型全景图</span></a></h3><h3 id="_1-基本数据类型-primitive-types" tabindex="-1"><a class="header-anchor" href="#_1-基本数据类型-primitive-types"><span>1. 基本数据类型（Primitive Types）</span></a></h3><table><thead><tr><th><strong>类型分类</strong></th><th><strong>C/C++ 类型</strong></th><th><strong>位宽(位)</strong></th><th><strong>取值范围</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td><strong>整型</strong></td><td><code>char</code></td><td>8</td><td>-128~127 或 0~255</td><td><code>char c = &#39;A&#39;;</code></td></tr><tr><td></td><td><code>short</code></td><td>16</td><td>-32,768~32,767</td><td><code>short s = 100;</code></td></tr><tr><td></td><td><code>int</code></td><td>32</td><td>-2³¹~2³¹-1 (约±21亿)</td><td><code>int i = -42;</code></td></tr><tr><td></td><td><code>long</code></td><td>32/64</td><td>平台相关</td><td><code>long L = 1000000L;</code></td></tr><tr><td></td><td><code>long long</code> (C++11)</td><td>64</td><td>-2⁶³~2⁶³-1</td><td><code>ll = 1e18;</code></td></tr><tr><td><strong>无符号整型</strong></td><td><code>unsigned char</code></td><td>8</td><td>0~255</td><td><code>uchar uc = 255;</code></td></tr><tr><td></td><td><code>unsigned int</code></td><td>32</td><td>0~4,294,967,295</td><td><code>uint ui = 4000000000;</code></td></tr><tr><td><strong>浮点型</strong></td><td><code>float</code></td><td>32</td><td>±3.4e-38~±3.4e38</td><td><code>float f = 3.14f;</code></td></tr><tr><td></td><td><code>double</code></td><td>64</td><td>±1.7e-308~±1.7e308</td><td><code>double d = 2.71828;</code></td></tr><tr><td></td><td><code>long double</code></td><td>80/128</td><td>扩展精度</td><td><code>ld = 1.18973e4932;</code></td></tr><tr><td><strong>布尔型</strong></td><td><code>bool</code> (C++)</td><td>8(通常)</td><td><code>true</code>/<code>false</code></td><td><code>bool flag = true;</code></td></tr><tr><td></td><td><code>_Bool</code> (C99)</td><td>8(通常)</td><td>0/1</td><td><code>_Bool b = 1;</code></td></tr></tbody></table><blockquote><p>💡 <strong>关键事实</strong>：</p><ul><li><code>char</code>本质是<strong>1字节整型</strong>，存储ASCII值</li><li><code>int</code>大小通常等于CPU字长（32位系统为4字节）</li><li>浮点数遵循 <strong>IEEE 754</strong> 标准，存在精度损失风险</li></ul></blockquote><hr><h3 id="_2-派生数据类型-derived-types" tabindex="-1"><a class="header-anchor" href="#_2-派生数据类型-derived-types"><span>2. 派生数据类型（Derived Types）</span></a></h3><h4 id="复合类型" tabindex="-1"><a class="header-anchor" href="#复合类型"><span>复合类型</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token comment">// 数组：同类型元素集合  </span></span>
<span class="line"><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 未初始化元素自动为0  </span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 结构体：异构数据聚合  </span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token keyword">double</span> x<span class="token punctuation">;</span>  </span>
<span class="line">    <span class="token keyword">double</span> y<span class="token punctuation">;</span>  </span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span>  </span>
<span class="line">Point p1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">3.5</span><span class="token punctuation">,</span> <span class="token number">2.8</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  </span>
<span class="line"></span>
<span class="line"><span class="token comment">// 联合体：共享内存空间  </span></span>
<span class="line"><span class="token keyword">union</span> Data <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token keyword">int</span> i<span class="token punctuation">;</span>  </span>
<span class="line">    <span class="token keyword">float</span> f<span class="token punctuation">;</span>  </span>
<span class="line">    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  </span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span>  </span>
<span class="line">Data data<span class="token punctuation">;</span> <span class="token comment">// 同一时刻只能存一个成员  </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="指针类型" tabindex="-1"><a class="header-anchor" href="#指针类型"><span>指针类型</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">int</span><span class="token operator">*</span> ptr <span class="token operator">=</span> <span class="token operator">&amp;</span>i<span class="token punctuation">;</span>     <span class="token comment">// 指向整型  </span></span>
<span class="line"><span class="token keyword">double</span><span class="token operator">*</span> dptr <span class="token operator">=</span> <span class="token operator">&amp;</span>d<span class="token punctuation">;</span> <span class="token comment">// 指向双精度  </span></span>
<span class="line"><span class="token keyword">void</span><span class="token operator">*</span> vptr <span class="token operator">=</span> ptr<span class="token punctuation">;</span>  <span class="token comment">// 通用指针（可指向任意类型）  </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="其他类型" tabindex="-1"><a class="header-anchor" href="#其他类型"><span>其他类型</span></a></h4><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token comment">// C++特有  </span></span>
<span class="line">std<span class="token double-colon punctuation">::</span>string str <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 字符串对象  </span></span>
<span class="line">std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> vec<span class="token punctuation">;</span>     <span class="token comment">// 动态数组  </span></span>
<span class="line">std<span class="token double-colon punctuation">::</span>unique_ptr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> smart_ptr<span class="token punctuation">;</span> <span class="token comment">// 智能指针  </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="二、类型转换机制剖析" tabindex="-1"><a class="header-anchor" href="#二、类型转换机制剖析"><span>二、类型转换机制剖析</span></a></h2><h3 id="_1-隐式转换-编译器自动完成" tabindex="-1"><a class="header-anchor" href="#_1-隐式转换-编译器自动完成"><span>1. 隐式转换（编译器自动完成）</span></a></h3><h4 id="算术转换规则-由低到高" tabindex="-1"><a class="header-anchor" href="#算术转换规则-由低到高"><span>算术转换规则（由低到高）</span></a></h4><div class="language-mermaid line-numbers-mode" data-highlighter="prismjs" data-ext="mermaid"><pre><code class="language-mermaid"><span class="line"><span class="token keyword">graph</span> LR  </span>
<span class="line">A<span class="token text string">[bool]</span> <span class="token arrow operator">--&gt;</span> B<span class="token text string">[char/short]</span>  </span>
<span class="line">B <span class="token arrow operator">--&gt;</span> C<span class="token text string">[int]</span>  </span>
<span class="line">C <span class="token arrow operator">--&gt;</span> D<span class="token text string">[unsigned int]</span>  </span>
<span class="line">D <span class="token arrow operator">--&gt;</span> E<span class="token text string">[long]</span>  </span>
<span class="line">E <span class="token arrow operator">--&gt;</span> F<span class="token text string">[unsigned long]</span>  </span>
<span class="line">F <span class="token arrow operator">--&gt;</span> G<span class="token text string">[long long]</span>  </span>
<span class="line">G <span class="token arrow operator">--&gt;</span> H<span class="token text string">[float]</span>  </span>
<span class="line">H <span class="token arrow operator">--&gt;</span> I<span class="token text string">[double]</span>  </span>
<span class="line">I <span class="token arrow operator">--&gt;</span> J<span class="token text string">[long double]</span>  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>典型场景</strong>：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  </span>
<span class="line"><span class="token keyword">double</span> d <span class="token operator">=</span> i<span class="token punctuation">;</span>     <span class="token comment">// int → double (安全)  </span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">float</span> f <span class="token operator">=</span> <span class="token number">3.14f</span><span class="token punctuation">;</span>  </span>
<span class="line"><span class="token keyword">double</span> d2 <span class="token operator">=</span> f<span class="token punctuation">;</span>    <span class="token comment">// float → double (安全)  </span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2.718</span><span class="token punctuation">;</span>    <span class="token comment">// double → int (截断小数)→ j=2  </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="整型提升-integer-promotion" tabindex="-1"><a class="header-anchor" href="#整型提升-integer-promotion"><span>整型提升（Integer Promotion）</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">char</span> c1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span> c2 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>  </span>
<span class="line"><span class="token keyword">int</span> result <span class="token operator">=</span> c1 <span class="token operator">*</span> c2<span class="token punctuation">;</span> <span class="token comment">// char自动提升为int计算  </span></span>
<span class="line"><span class="token comment">// 若用char接收：char r = c1*c2; → 溢出错误！  </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="符号处理规则" tabindex="-1"><a class="header-anchor" href="#符号处理规则"><span>符号处理规则</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">unsigned</span> <span class="token keyword">int</span> u <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  </span>
<span class="line"><span class="token keyword">int</span> s <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">;</span>  </span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">&lt;</span> u<span class="token punctuation">)</span> <span class="token comment">// 陷阱！s被转为unsigned → 结果false！  </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>⚠️ <strong>隐式转换三大陷阱</strong>：</p><ol><li>浮点→整型：<strong>截断小数</strong>（非四舍五入）</li><li>大类型→小类型：<strong>数据截断</strong></li><li>有符号↔无符号：<strong>符号位误解</strong></li></ol></blockquote><hr><h3 id="_2-显式转换-程序员手动控制" tabindex="-1"><a class="header-anchor" href="#_2-显式转换-程序员手动控制"><span>2. 显式转换（程序员手动控制）</span></a></h3><h4 id="c风格强制转换" tabindex="-1"><a class="header-anchor" href="#c风格强制转换"><span>C风格强制转换</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">double</span> pi <span class="token operator">=</span> <span class="token number">3.14159</span><span class="token punctuation">;</span>  </span>
<span class="line"><span class="token keyword">int</span> approx <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>pi<span class="token punctuation">;</span>          <span class="token comment">// 截断 → approx=3  </span></span>
<span class="line"><span class="token keyword">float</span> fpi <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>pi<span class="token punctuation">;</span>         <span class="token comment">// 精度损失  </span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">char</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>approx<span class="token punctuation">;</span>      <span class="token comment">// 整型指针→字符指针  </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="c-风格安全转换" tabindex="-1"><a class="header-anchor" href="#c-风格安全转换"><span>C++风格安全转换</span></a></h4><table><thead><tr><th><strong>转换类型</strong></th><th><strong>语法</strong></th><th><strong>适用场景</strong></th></tr></thead><tbody><tr><td><code>static_cast</code></td><td><code>static_cast&lt;T&gt;(expr)</code></td><td>基本类型转换、父子类指针转换</td></tr><tr><td><code>dynamic_cast</code></td><td><code>dynamic_cast&lt;T&gt;(expr)</code></td><td>多态类安全向下转型</td></tr><tr><td><code>const_cast</code></td><td><code>const_cast&lt;T&gt;(expr)</code></td><td>移除<code>const</code>属性</td></tr><tr><td><code>reinterpret_cast</code></td><td><code>reinterpret_cast&lt;T&gt;(expr)</code></td><td>低层指针转换（高风险！）</td></tr></tbody></table><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token comment">// 安全浮点→整型  </span></span>
<span class="line"><span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token number">7.8</span><span class="token punctuation">;</span>  </span>
<span class="line"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// i=7  </span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 移除const属性  </span></span>
<span class="line"><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> str <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>  </span>
<span class="line"><span class="token keyword">char</span><span class="token operator">*</span> modifiable <span class="token operator">=</span> <span class="token generic-function"><span class="token function">const_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line"></span>
<span class="line"><span class="token comment">// 危险的内存重新解释  </span></span>
<span class="line"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0x12345678</span><span class="token punctuation">;</span>  </span>
<span class="line"><span class="token keyword">char</span><span class="token operator">*</span> bytes <span class="token operator">=</span> <span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line"><span class="token comment">// bytes[0]=0x78 (小端系统)  </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="三、类型转换实战场景" tabindex="-1"><a class="header-anchor" href="#三、类型转换实战场景"><span>三、类型转换实战场景</span></a></h2><h3 id="_1-数值计算中的转换" tabindex="-1"><a class="header-anchor" href="#_1-数值计算中的转换"><span>1. 数值计算中的转换</span></a></h3><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  </span>
<span class="line"><span class="token keyword">double</span> result <span class="token operator">=</span> a <span class="token operator">/</span> b<span class="token punctuation">;</span>      <span class="token comment">// ❌ 整数除法 → 2.0  </span></span>
<span class="line"><span class="token keyword">double</span> correct <span class="token operator">=</span> static_cast<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">/</span> b<span class="token punctuation">;</span> <span class="token comment">// ✅ 5.0/2 → 2.5  </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-指针类型转换" tabindex="-1"><a class="header-anchor" href="#_2-指针类型转换"><span>2. 指针类型转换</span></a></h3><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line">Base<span class="token operator">*</span> base <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Derived</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line"><span class="token comment">// 安全向下转型  </span></span>
<span class="line">Derived<span class="token operator">*</span> derived <span class="token operator">=</span> <span class="token generic-function"><span class="token function">dynamic_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>Derived<span class="token operator">*</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>derived<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* 成功转换 */</span> <span class="token punctuation">}</span>  </span>
<span class="line"></span>
<span class="line"><span class="token comment">// 危险的内存重解释  </span></span>
<span class="line"><span class="token keyword">void</span><span class="token operator">*</span> raw <span class="token operator">=</span> <span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">0xDEADBEEF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-自定义类型转换-c" tabindex="-1"><a class="header-anchor" href="#_3-自定义类型转换-c"><span>3. 自定义类型转换（C++）</span></a></h3><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token keyword">class</span> <span class="token class-name">Meter</span> <span class="token punctuation">{</span>  </span>
<span class="line"><span class="token keyword">public</span><span class="token operator">:</span>  </span>
<span class="line">    <span class="token keyword">explicit</span> <span class="token function">Meter</span><span class="token punctuation">(</span><span class="token keyword">double</span> val<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">value</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  </span>
<span class="line">    <span class="token keyword">operator</span> <span class="token keyword">double</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> value<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment">// 转换函数  </span></span>
<span class="line"><span class="token keyword">private</span><span class="token operator">:</span>  </span>
<span class="line">    <span class="token keyword">double</span> value<span class="token punctuation">;</span>  </span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span>  </span>
<span class="line"></span>
<span class="line">Meter <span class="token function">m</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line"><span class="token keyword">double</span> dist <span class="token operator">=</span> m<span class="token punctuation">;</span> <span class="token comment">// 自动调用operator double()  </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="四、常见类型转换陷阱与解决方案" tabindex="-1"><a class="header-anchor" href="#四、常见类型转换陷阱与解决方案"><span>四、常见类型转换陷阱与解决方案</span></a></h2><ol><li><strong>浮点精度损失</strong></li></ol><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span><span class="token punctuation">;</span> <span class="token comment">// 0.30000000000000004  </span></span>
<span class="line"><span class="token comment">// 解决方案：使用容忍度比较  </span></span>
<span class="line"><span class="token keyword">const</span> <span class="token keyword">double</span> eps <span class="token operator">=</span> <span class="token number">1e-9</span><span class="token punctuation">;</span>  </span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fabs</span><span class="token punctuation">(</span>d <span class="token operator">-</span> <span class="token number">0.3</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> eps<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* 视为相等 */</span> <span class="token punctuation">}</span>  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>整数溢出</strong></li></ol><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1000000</span><span class="token punctuation">;</span>  </span>
<span class="line"><span class="token keyword">int</span> b <span class="token operator">=</span> a <span class="token operator">*</span> a<span class="token punctuation">;</span> <span class="token comment">// 溢出 → 错误结果！  </span></span>
<span class="line"><span class="token comment">// 解决方案：使用更大类型  </span></span>
<span class="line"><span class="token keyword">long</span> <span class="token keyword">long</span> big <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span>a <span class="token operator">*</span> a<span class="token punctuation">;</span>  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><strong>符号位扩展问题</strong></li></ol><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token number">0xFF</span><span class="token punctuation">;</span> <span class="token comment">// -1 (有符号)  </span></span>
<span class="line"><span class="token keyword">int</span> i <span class="token operator">=</span> c<span class="token punctuation">;</span>      <span class="token comment">// -1 (符号扩展)  </span></span>
<span class="line"><span class="token keyword">unsigned</span> <span class="token keyword">char</span> uc <span class="token operator">=</span> <span class="token number">0xFF</span><span class="token punctuation">;</span> <span class="token comment">// 255  </span></span>
<span class="line"><span class="token keyword">int</span> ui <span class="token operator">=</span> uc<span class="token punctuation">;</span>     <span class="token comment">// 255 (零扩展)  </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li><strong>指针类型误用</strong></li></ol><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ❌ C++需类型转换  </span></span>
<span class="line"><span class="token comment">// 正确：  </span></span>
<span class="line"><span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> static_cast<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li><strong>C++窄化转换警告</strong></li></ol><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span> <span class="token comment">// 触发编译器警告  </span></span>
<span class="line"><span class="token comment">// 明确表示接受窄化：  </span></span>
<span class="line"><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><blockquote><p><strong>终极心法</strong>：</p><ol><li><strong>最小惊讶原则</strong>：避免隐式转换，优先使用显式<code>static_cast</code></li><li><strong>防御性编程</strong>：对转换结果进行有效性验证</li><li><strong>类型安全至上</strong>：C++中避免C风格强制转换</li><li><strong>精度敏感场景</strong>：使用整型代替浮点数（如货币计算）</li></ol></blockquote><p><strong>记住：类型系统是你的盟友而非敌人——理解它，驯服它，你的代码将无往不利！</strong> 💪</p><h2 id="🚀-算法竞赛输入数据情形与处理方法大全" tabindex="-1"><a class="header-anchor" href="#🚀-算法竞赛输入数据情形与处理方法大全"><span>🚀 算法竞赛输入数据情形与处理方法大全</span></a></h2><blockquote><p><strong>“输入处理是算法竞赛的起跑线——快人一步，AC不愁！”</strong></p></blockquote><p>本文全面总结算法竞赛（洛谷/牛客/力扣/Codeforces）中<strong>8大类输入情形</strong>及对应的<strong>高效处理方法</strong>，附C++代码模板和避坑指南。</p><hr><h2 id="一、基础输入情形-90-题目适用" tabindex="-1"><a class="header-anchor" href="#一、基础输入情形-90-题目适用"><span>一、基础输入情形（90%题目适用）</span></a></h2><h3 id="_1-单变量输入" tabindex="-1"><a class="header-anchor" href="#_1-单变量输入"><span>1. 单变量输入</span></a></h3><p><strong>情形</strong>：输入单个整数/浮点数/字符串<br><strong>题例</strong>：计算平方（牛客NC22001）</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token keyword">int</span> n<span class="token punctuation">;</span>  </span>
<span class="line">cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>  </span>
<span class="line"><span class="token comment">// 或 scanf(&quot;%d&quot;, &amp;n);  </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-多变量同行输入" tabindex="-1"><a class="header-anchor" href="#_2-多变量同行输入"><span>2. 多变量同行输入</span></a></h3><p><strong>情形</strong>：用空格分隔的多个数据<br><strong>题例</strong>：A+B Problem（洛谷P1001）</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>  </span>
<span class="line">cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b<span class="token punctuation">;</span>                <span class="token comment">// C++  </span></span>
<span class="line"><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// C语言  </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-多行输入-固定行数" tabindex="-1"><a class="header-anchor" href="#_3-多行输入-固定行数"><span>3. 多行输入（固定行数）</span></a></h3><p><strong>情形</strong>：第一行为数据量n，后面n行数据<br><strong>题例</strong>：学生成绩统计（力扣模拟题）</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token keyword">int</span> n<span class="token punctuation">;</span>  </span>
<span class="line">cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>  </span>
<span class="line">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">arr</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  </span>
<span class="line">    cin <span class="token operator">&gt;&gt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="二、进阶输入情形-含特殊格式" tabindex="-1"><a class="header-anchor" href="#二、进阶输入情形-含特殊格式"><span>二、进阶输入情形（含特殊格式）</span></a></h2><h3 id="_4-不定长空格分隔输入" tabindex="-1"><a class="header-anchor" href="#_4-不定长空格分隔输入"><span>4. 不定长空格分隔输入</span></a></h3><p><strong>情形</strong>：单行未知数量的数据（如数组输入）<br><strong>题例</strong>：数组排序（洛谷P1177）</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> nums<span class="token punctuation">;</span>  </span>
<span class="line"><span class="token keyword">int</span> x<span class="token punctuation">;</span>  </span>
<span class="line"><span class="token keyword">while</span><span class="token punctuation">(</span>cin <span class="token operator">&gt;&gt;</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">    nums<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">    <span class="token keyword">if</span><span class="token punctuation">(</span>cin<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">// 检测换行  </span></span>
<span class="line"><span class="token punctuation">}</span>  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-含逗号分隔的输入" tabindex="-1"><a class="header-anchor" href="#_5-含逗号分隔的输入"><span>5. 含逗号分隔的输入</span></a></h3><p><strong>情形</strong>：CSV格式数据（常见于力扣）<br><strong>题例</strong>：字符串分割（力扣LCR 122）</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line">string s<span class="token punctuation">;</span>  </span>
<span class="line">cin <span class="token operator">&gt;&gt;</span> s<span class="token punctuation">;</span>  </span>
<span class="line">stringstream <span class="token function">ss</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> tokens<span class="token punctuation">;</span>  </span>
<span class="line"><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span> token<span class="token punctuation">,</span> <span class="token char">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 按逗号分割  </span></span>
<span class="line">    tokens<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line"><span class="token punctuation">}</span>  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-混合类型输入" tabindex="-1"><a class="header-anchor" href="#_6-混合类型输入"><span>6. 混合类型输入</span></a></h3><p><strong>情形</strong>：一行中含多种数据类型<br><strong>题例</strong>：商品信息处理（牛客NC20154）</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line">string name<span class="token punctuation">;</span>  </span>
<span class="line"><span class="token keyword">double</span> price<span class="token punctuation">;</span>  </span>
<span class="line"><span class="token keyword">int</span> stock<span class="token punctuation">;</span>  </span>
<span class="line"></span>
<span class="line"><span class="token comment">// 输入示例: &quot;Apple 5.99 100&quot;  </span></span>
<span class="line">cin <span class="token operator">&gt;&gt;</span> name <span class="token operator">&gt;&gt;</span> price <span class="token operator">&gt;&gt;</span> stock<span class="token punctuation">;</span>  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="三、复杂输入情形-需特殊处理" tabindex="-1"><a class="header-anchor" href="#三、复杂输入情形-需特殊处理"><span>三、复杂输入情形（需特殊处理）</span></a></h2><h3 id="_7-多组测试数据-高频考点" tabindex="-1"><a class="header-anchor" href="#_7-多组测试数据-高频考点"><span>7. 多组测试数据（高频考点！）</span></a></h3><h4 id="情形1-未知组数-eof结束" tabindex="-1"><a class="header-anchor" href="#情形1-未知组数-eof结束"><span>情形1：未知组数（EOF结束）</span></a></h4><p><strong>题例</strong>：A+B系列（Codeforces 1A）</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>  </span>
<span class="line"><span class="token keyword">while</span><span class="token punctuation">(</span>cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 自动检测EOF  </span></span>
<span class="line">    cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">+</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  </span>
<span class="line"><span class="token punctuation">}</span>  </span>
<span class="line"><span class="token comment">/* C语言版 */</span>  </span>
<span class="line"><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">EOF</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line"><span class="token punctuation">}</span>  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="情形2-指定组数" tabindex="-1"><a class="header-anchor" href="#情形2-指定组数"><span>情形2：指定组数</span></a></h4><p><strong>题例</strong>：矩阵运算（洛谷P1303）</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token keyword">int</span> T<span class="token punctuation">;</span>  </span>
<span class="line">cin <span class="token operator">&gt;&gt;</span> T<span class="token punctuation">;</span>  </span>
<span class="line"><span class="token keyword">while</span><span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token comment">// 处理每组数据  </span></span>
<span class="line"><span class="token punctuation">}</span>  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="情形3-特殊结束符-如0" tabindex="-1"><a class="header-anchor" href="#情形3-特殊结束符-如0"><span>情形3：特殊结束符（如0）</span></a></h4><p><strong>题例</strong>：循环求和（牛客NC22003）</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token keyword">int</span> x<span class="token punctuation">;</span>  </span>
<span class="line"><span class="token keyword">while</span><span class="token punctuation">(</span>cin <span class="token operator">&gt;&gt;</span> x <span class="token operator">&amp;&amp;</span> x <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token comment">// 遇到0停止  </span></span>
<span class="line"><span class="token punctuation">}</span>  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-字符串处理-易错重灾区" tabindex="-1"><a class="header-anchor" href="#_8-字符串处理-易错重灾区"><span>8. 字符串处理（易错重灾区！）</span></a></h3><h4 id="情形1-含空格字符串" tabindex="-1"><a class="header-anchor" href="#情形1-含空格字符串"><span>情形1：含空格字符串</span></a></h4><p><strong>题例</strong>：句子反转（力扣LCR 181）</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line">string s<span class="token punctuation">;</span>  </span>
<span class="line"><span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 读取整行  </span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 注意：混合cin和getline时清空缓冲区  </span></span>
<span class="line">cin<span class="token punctuation">.</span><span class="token function">ignore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在getline前使用  </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="情形2-特定格式字符串" tabindex="-1"><a class="header-anchor" href="#情形2-特定格式字符串"><span>情形2：特定格式字符串</span></a></h4><p><strong>题例</strong>：时间解析（Codeforces 4A）<br> 输入格式：<code>[HH:MM]</code></p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token keyword">char</span> colon<span class="token punctuation">;</span>  </span>
<span class="line"><span class="token keyword">int</span> hour<span class="token punctuation">,</span> minute<span class="token punctuation">;</span>  </span>
<span class="line">cin <span class="token operator">&gt;&gt;</span> hour <span class="token operator">&gt;&gt;</span> colon <span class="token operator">&gt;&gt;</span> minute<span class="token punctuation">;</span>  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="情形3-大文本输入-1mb" tabindex="-1"><a class="header-anchor" href="#情形3-大文本输入-1mb"><span>情形3：大文本输入（&gt;1MB）</span></a></h4><p><strong>优化方案</strong>：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line">ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 关闭同步  </span></span>
<span class="line">cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment">// 解绑cin/cout  </span></span>
<span class="line">string s<span class="token punctuation">;</span>  </span>
<span class="line">s<span class="token punctuation">.</span><span class="token function">reserve</span><span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// 预分配内存  </span></span>
<span class="line">cin <span class="token operator">&gt;&gt;</span> s<span class="token punctuation">;</span>                     <span class="token comment">// 或getline  </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="四、输入优化技巧-大数据必备" tabindex="-1"><a class="header-anchor" href="#四、输入优化技巧-大数据必备"><span>四、输入优化技巧（大数据必备）</span></a></h2><h3 id="_1-快速读入-整数" tabindex="-1"><a class="header-anchor" href="#_1-快速读入-整数"><span>1. 快速读入（整数）</span></a></h3><p><strong>适用场景</strong>：数据量 &gt; 10^6</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  </span>
<span class="line">    <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">    <span class="token keyword">while</span><span class="token punctuation">(</span>c<span class="token operator">&lt;</span><span class="token char">&#39;0&#39;</span> <span class="token operator">||</span> c<span class="token operator">&gt;</span><span class="token char">&#39;9&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">        <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token char">&#39;-&#39;</span><span class="token punctuation">)</span> f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  </span>
<span class="line">        c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line">    <span class="token keyword">while</span><span class="token punctuation">(</span>c<span class="token operator">&gt;=</span><span class="token char">&#39;0&#39;</span> <span class="token operator">&amp;&amp;</span> c<span class="token operator">&lt;=</span><span class="token char">&#39;9&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">        x <span class="token operator">=</span> x<span class="token operator">*</span><span class="token number">10</span> <span class="token operator">+</span> c<span class="token operator">-</span><span class="token char">&#39;0&#39;</span><span class="token punctuation">;</span>  </span>
<span class="line">        c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line">    <span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span>  </span>
<span class="line"><span class="token punctuation">}</span>  </span>
<span class="line"></span>
<span class="line"><span class="token comment">// 使用  </span></span>
<span class="line"><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-按行快速输入" tabindex="-1"><a class="header-anchor" href="#_2-按行快速输入"><span>2. 按行快速输入</span></a></h3><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token keyword">const</span> <span class="token keyword">int</span> BUF <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">20</span><span class="token punctuation">;</span>  </span>
<span class="line"><span class="token keyword">char</span> buf<span class="token punctuation">[</span>BUF<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span>p1<span class="token operator">=</span>buf<span class="token punctuation">,</span> <span class="token operator">*</span>p2<span class="token operator">=</span>buf<span class="token punctuation">;</span>  </span>
<span class="line"><span class="token keyword">char</span> <span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token keyword">return</span> p1<span class="token operator">==</span>p2 <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>p2<span class="token operator">=</span><span class="token punctuation">(</span>p1<span class="token operator">=</span>buf<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">fread</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>BUF<span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p1<span class="token operator">==</span>p2<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token constant">EOF</span> <span class="token operator">:</span> <span class="token operator">*</span>p1<span class="token operator">++</span><span class="token punctuation">;</span>  </span>
<span class="line"><span class="token punctuation">}</span>  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-c-流加速-通用" tabindex="-1"><a class="header-anchor" href="#_3-c-流加速-通用"><span>3. C++流加速（通用）</span></a></h3><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span>  </span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">    std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">    std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">    <span class="token comment">// 后续输入操作...  </span></span>
<span class="line"><span class="token punctuation">}</span>  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="五、平台差异处理指南" tabindex="-1"><a class="header-anchor" href="#五、平台差异处理指南"><span>五、平台差异处理指南</span></a></h2><table><thead><tr><th><strong>平台</strong></th><th><strong>输入特点</strong></th><th><strong>应对策略</strong></th></tr></thead><tbody><tr><td><strong>洛谷</strong></td><td>严格遵循题面格式</td><td>仔细阅读输入描述</td></tr><tr><td><strong>牛客网</strong></td><td>多含多组测试数据</td><td>务必写EOF循环</td></tr><tr><td><strong>力扣</strong></td><td>参数通过函数传入</td><td>无需处理输入，专注函数实现</td></tr><tr><td><strong>Codeforces</strong></td><td>输入量大且格式多变</td><td>使用快速读入+鲁棒性处理</td></tr></tbody></table><hr><h2 id="六、输入处理自测题-检验掌握程度" tabindex="-1"><a class="header-anchor" href="#六、输入处理自测题-检验掌握程度"><span>六、输入处理自测题（检验掌握程度）</span></a></h2><ol><li><strong>情形</strong>：第一行整数n，第二行n个空格分隔整数</li></ol><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token keyword">int</span> n<span class="token punctuation">;</span> cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>  </span>
<span class="line">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">arr</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> cin <span class="token operator">&gt;&gt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>情形</strong>：未知行数，每行两个整数直到EOF</li></ol><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>  </span>
<span class="line"><span class="token keyword">while</span><span class="token punctuation">(</span>cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token comment">/* 处理 */</span>  </span>
<span class="line"><span class="token punctuation">}</span>  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><strong>情形</strong>：含空格的字符串和后续数字</li></ol><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">输入： &quot;Hello World 2023&quot;  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line">string s1<span class="token punctuation">,</span> s2<span class="token punctuation">;</span>  </span>
<span class="line"><span class="token keyword">int</span> year<span class="token punctuation">;</span>  </span>
<span class="line">cin <span class="token operator">&gt;&gt;</span> s1 <span class="token operator">&gt;&gt;</span> s2 <span class="token operator">&gt;&gt;</span> year<span class="token punctuation">;</span>  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li><strong>情形</strong>：逗号分隔的浮点数</li></ol><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">输入： &quot;3.14,2.718,1.618&quot;  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line">string line<span class="token punctuation">;</span>  </span>
<span class="line"><span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span> line<span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">stringstream <span class="token function">ss</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">vector<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">&gt;</span> nums<span class="token punctuation">;</span>  </span>
<span class="line">string token<span class="token punctuation">;</span>  </span>
<span class="line"><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span> token<span class="token punctuation">,</span> <span class="token char">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">    nums<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">stod</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line"><span class="token punctuation">}</span>  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>竞赛输入心法</strong>：</p><ol><li><strong>先看数据范围</strong> → 决定是否用快速读入</li><li><strong>次看数据格式</strong> → 确定分割方式</li><li><strong>三验边界条件</strong> → 空行/空格/极端值</li><li><strong>最后平台适配</strong> → 特别是EOF处理</li></ol></blockquote><hr><p>掌握这些输入技巧，你将轻松突破算法竞赛的<strong>第一道防线</strong>！下次遇到输入问题，回来看看这张速查表吧~ 🚀</p><h2 id="📚-推荐学习资源" tabindex="-1"><a class="header-anchor" href="#📚-推荐学习资源"><span>📚 推荐学习资源</span></a></h2><p>根据搜索到的优质资料，推荐以下学习资源：</p><ol><li><strong>在线教程</strong>：</li></ol><ul><li><p><a href="https://www.runoob.com/cprogramming/c-tutorial.html" target="_blank" rel="noopener noreferrer">菜鸟教程C语言</a></p></li><li><p><a href="https://c.biancheng.net/" target="_blank" rel="noopener noreferrer">C语言中文网</a></p></li></ul><ol start="2"><li><strong>练习平台</strong>：</li></ol><ul><li><p>洛谷</p></li><li><p>Codeforces</p></li><li><p>AtCoder</p></li></ul><ol start="3"><li><strong>经典书籍</strong>：</li></ol><ul><li><p>《C程序设计语言》(K&amp;R)</p></li><li><p>《C++ Primer》</p></li><li><p>《算法竞赛入门经典》</p></li></ul><h2 id="🎉-总结-你的编程之旅开始了" tabindex="-1"><a class="header-anchor" href="#🎉-总结-你的编程之旅开始了"><span>🎉 总结：你的编程之旅开始了！</span></a></h2><p>顺序程序设计是所有编程技能的基石。通过本文，你应该掌握了：</p><ol><li><p><strong>输入输出基础</strong>：scanf/printf的详细用法和格式控制</p></li><li><p><strong>现代C++方式</strong>：cin/cout和iomanip库的强大功能</p></li><li><p><strong>数据类型系统</strong>：各种进制的表示和转换方法</p></li><li><p><strong>实践技巧</strong>：竞赛中常用的优化和陷阱规避</p></li></ol><p>记住这几个要点：</p><ul><li><p><strong>多练习</strong>：熟能生巧，代码写多了自然就顺手了</p></li><li><p><strong>多思考</strong>：每道题都有多种解法，思考哪种更优雅</p></li><li><p><strong>注重细节</strong>：格式控制、进制转换都是细节决定成败</p></li><li><p><strong>保持耐心</strong>：编程就像武功，需要一点一点积累</p></li></ul><p>现在，拿起键盘，开始你的算法竞赛之旅吧！加油！🚀</p><hr>`,200)]))}const i=s(e,[["render",o]]),r=JSON.parse('{"path":"/basic-syntax/sequential-structure/","title":"顺序程序设计：算法竞赛新手的第一堂课","lang":"zh-CN","frontmatter":{},"git":{},"filePathRelative":"basic-syntax/sequential-structure/README.md"}');export{i as comp,r as data};
