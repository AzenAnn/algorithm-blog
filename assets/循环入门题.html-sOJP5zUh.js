import{_ as s,c as a,b as e,o as p}from"./app-B65WzQHF.js";const l={};function i(t,n){return p(),a("div",null,n[0]||(n[0]=[e(`<h1 id="循环语言入门题" tabindex="-1"><a class="header-anchor" href="#循环语言入门题"><span>循环语言入门题</span></a></h1><blockquote><p>循环是一个枚举的过程，我们应该重点关注每次循环所完成的任务。</p></blockquote><p>我们可以从这篇文档选的一些题目来看，如何利用一些基础的语法完成不同的任务，核心是在每次循环中解决<strong>如何完成题目的任务要求</strong></p><p><mark>第一类：计数与统计</mark></p><p>给定一些数据，按照具体的条件筛选出符合的数据个数。</p><p>解题思路：</p><ol><li><p>初始化计数器（可能一个或多个，根据统计目标）。 例如    <em>int cnt=0;</em></p></li><li><p>循环遍历每个数据项。 （使用for或者while循环）</p></li><li><p>对于每个数据项，判断是否<strong>满足条件</strong>，如果满足则计数器增加。（这里就要把条件转化为程序语言，通常是if-else的选择语句）</p></li><li><p>注意：有时需要维护连续计数（如B2151），在遇到不满足条件时<strong>重置</strong>当前连续计数，并记录最大连续计数。</p></li></ol><p><mark>第二类：求和与均值</mark></p><p>给定数据，求其和与均值。只需要遍历每个元素累加即可，由于数据需要存储起来，我们可以先定义一个“累加器”来累加所有数据。注意题目给的输入输出。</p><p>解题思路：</p><ol><li><p>初始化累加器（sum）为0。</p></li><li><p>循环读入每个数据项，将其加到累加器上。</p></li><li><p>循环结束后，计算均值（如果需要）：均值 = sum / 数据个数。</p></li><li><p>注意：整数除法可能丢失小数，所以通常用浮点数表示均值（如将sum转为double再除）。</p></li></ol><p><mark>第三类：最值问题</mark></p><p>该类题目涉及到简单的比较运算符。</p><p>解题思路：</p><ol><li><p>初始化最大值（或最小值）为第一个数据，或者一个合理的初始值（如0，但注意数据范围）。</p></li><li><p>循环遍历每个数据项，与当前最大值比较，如果更大则更新最大值（最小值同理）。</p></li><li><p>输出所求的最值。</p></li></ol><p><mark>第四类：数字处理</mark></p><p>典型的一类题是处理一个数字的各个位数，如满足等于某个具体的数k来统计k出现的次数；</p><p>也可以是利用循环实现了乘方（本质就是枚举）；还可以是一些含有“递推性质”的运算式子。当然，累加累乘也可以用循环来实现。</p><p>解题思路：</p><ol><li><p>循环分解数字（如分离各位数字）通常使用取模和整除操作，循环直到数字变为0。</p></li><li><p>对于乘方计算，使用循环累乘（注意0次幂和负数次幂，但题目限定n为正整数且结果绝对值范围）。</p></li><li><p>斐波那契数列：初始化前两项（通常为1,1），循环从第3项开始，每一项等于前两项之和。</p></li></ol><p><mark>第五类：模拟过程</mark></p><p>解题思路：</p><ol><li><p>根据题目描述的规则，用循环模拟每一步过程。</p></li><li><p>更新状态变量（如剩余药品量、当前时间等）。</p></li><li><p>注意：有时需要计算中间量（如距离），并按照规则计算时间、数量等。</p></li></ol><p>下面我们具体来看一些语法题，采用循环语句先前所学的知识来解决。</p><hr><h1 id="b2151-正常血压" tabindex="-1"><a class="header-anchor" href="#b2151-正常血压"><span>B2151 正常血压</span></a></h1><h2 id="题目描述" tabindex="-1"><a class="header-anchor" href="#题目描述"><span>题目描述</span></a></h2><p>监护室每小时测量一次病人的血压，若收缩压在 90∼140 之间并且舒张压在 60∼90 之间(包含端点值)则称之为正常，现给出某病人若干次测量的血压值，计算病人保持正常血压的最长小时数。</p><h2 id="输入格式" tabindex="-1"><a class="header-anchor" href="#输入格式"><span>输入格式</span></a></h2><p>第一行为一个正整数 n(n&lt;100)，其后有 n 行，每行 2 个正整数，分别为一次测量的收缩压和舒张压。</p><h2 id="输出格式" tabindex="-1"><a class="header-anchor" href="#输出格式"><span>输出格式</span></a></h2><p>输出仅一行，血压连续正常的最长小时数。</p><h2 id="样例" tabindex="-1"><a class="header-anchor" href="#样例"><span>样例</span></a></h2><h3 id="样例输入-1" tabindex="-1"><a class="header-anchor" href="#样例输入-1"><span>样例输入 1</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">4</span>
<span class="line">100 80</span>
<span class="line">90 50</span>
<span class="line">120 60</span>
<span class="line">140 90</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="样例输出-1" tabindex="-1"><a class="header-anchor" href="#样例输出-1"><span>样例输出 1</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">2</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>读题得知这个题有多组数据，使用循环读入，对每一组数据进行条件判断，如果满足题干的大小关系，那么就使得计数器cnt++；一但不满足就清空计数器。为什么？题目要求血压正常<strong>连续</strong>时长。而且，题目要求的是符合连续的<strong>最长时长</strong>，所以每次在归零计数器之前，还不要忘记了与先前已经存在的最大值进行比较，取较大值。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token comment">//参考代码</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> n<span class="token punctuation">;</span></span>
<span class="line">    cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">     cin<span class="token operator">&gt;&gt;</span>a<span class="token operator">&gt;&gt;</span>b<span class="token punctuation">;</span></span>
<span class="line">     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">&gt;=</span><span class="token number">90</span><span class="token operator">&amp;&amp;</span>a<span class="token operator">&lt;=</span><span class="token number">140</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>b<span class="token operator">&gt;=</span><span class="token number">60</span> <span class="token operator">&amp;&amp;</span>b<span class="token operator">&lt;=</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">     cnt<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">         <span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token operator">&gt;</span>ans<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">                 ans<span class="token operator">=</span>cnt<span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token comment">//这里来判断当前的cnt是不是较大的  </span></span>
<span class="line">     <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>             <span class="token comment">//这里说明至少有一个条件不满足，不是血压正常了 要归零</span></span>
<span class="line">      cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">     <span class="token punctuation">}</span> </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"> cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="b2154-数-1-的个数" tabindex="-1"><a class="header-anchor" href="#b2154-数-1-的个数"><span>B2154 数 1 的个数</span></a></h1><h2 id="题目描述-1" tabindex="-1"><a class="header-anchor" href="#题目描述-1"><span>题目描述</span></a></h2><p>给定一个十进制正整数 n，写下从 1 到 n 的所有整数，然后数一下其中出现的数字 1 的个数。 例如： 当 n=2 时，写下 1,2，这样只出现了 1 个 1； 当 n=12 时，写下 1,2,3,4,5,6,7,8,9,10,11,12，这样出现了 5 个 1。</p><h2 id="输入格式-1" tabindex="-1"><a class="header-anchor" href="#输入格式-1"><span>输入格式</span></a></h2><p>正整数 n。1≤n≤10000。输出格式一个正整数，即 1 的个数。输入输出样例输入 #112输出 #15在</p><h2 id="输出格式-1" tabindex="-1"><a class="header-anchor" href="#输出格式-1"><span>输出格式</span></a></h2><p>一个正整数，即 1 的个数。</p><h3 id="样例输入-1-1" tabindex="-1"><a class="header-anchor" href="#样例输入-1-1"><span>样例输入 1</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">12</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="样例输出-1-1" tabindex="-1"><a class="header-anchor" href="#样例输出-1-1"><span>样例输出 1</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">5</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>循环读入n个数，对于其中的每一个数i（i从1到n），判断i中共有几个“1”，然后累加到计数器中，上述的操作，涉及到数字处理，即遍历一个数i的<strong>每一位</strong>，这个操作可以使用一个<strong>while循环</strong>来表示，我们知道$ i $ %10表示的是i的<strong>个位</strong>，先判断它是否满足，然后把i除以10；相当于去掉了一位，再进行对10与余数的操作，如此循环就实现了遍历每一位，那么停止是什么要求？当$i$ &lt;10的时候，再除以10就变为0（整数除法）；所以可以设置循环条件是大于0。</p><p><strong>那么其实我们还可以把统计“1”修改为统计0到9中的任何一个数。同样用到了遍历一个数每一位数。</strong></p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"> <span class="token keyword">int</span> n<span class="token punctuation">;</span></span>
<span class="line"> cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span></span>
<span class="line"> <span class="token keyword">int</span> cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> t<span class="token operator">=</span>i<span class="token punctuation">;</span> </span>
<span class="line">    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">%</span><span class="token number">10</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            cnt<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        t<span class="token operator">/=</span><span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line">     <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line">cout<span class="token operator">&lt;&lt;</span>cnt<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="b2061-整数的个数" tabindex="-1"><a class="header-anchor" href="#b2061-整数的个数"><span>B2061 整数的个数</span></a></h1><h2 id="题目描述-2" tabindex="-1"><a class="header-anchor" href="#题目描述-2"><span>题目描述</span></a></h2><p>给定 k（1&lt;k&lt;100）个正整数，其中每个数都是大于等于 1，小于等于 10 的数。写程序计算给定的 k 个正整数中，1，5 和 10 出现的次数。</p><h2 id="输入格式-2" tabindex="-1"><a class="header-anchor" href="#输入格式-2"><span>输入格式</span></a></h2><p>输入有两行：第一行包含一个正整数 k，第二行包含 k 个正整数，每两个正整数用一个空格分开。输出格式输出有三行，第一行为 1 出现的次数，第二行为 5 出现的次数，第三行为 10 出现的次数。输入输出</p><h2 id="输出格式-2" tabindex="-1"><a class="header-anchor" href="#输出格式-2"><span>输出格式</span></a></h2><p>输出有三行，第一行为 1 出现的次数，第二行为 5 出现的次数，第三行为 10 出现的次数。输入输出</p><h2 id="样例-1" tabindex="-1"><a class="header-anchor" href="#样例-1"><span>样例</span></a></h2><h3 id="样例输入-1-2" tabindex="-1"><a class="header-anchor" href="#样例输入-1-2"><span>样例输入 1</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">5</span>
<span class="line">1 5 8 10 5</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="样例输出-1-2" tabindex="-1"><a class="header-anchor" href="#样例输出-1-2"><span>样例输出 1</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">1</span>
<span class="line">2</span>
<span class="line">1</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个题也有一些相似之处，做了一点小小的改动。诸如1和5的统计还是对每个数字进行各个位上数的遍历，判断是否符合条件；而至于是否为10；题目的数据比较特殊，只需要判断这个数字是不是是10即可。相应得用三个变量来充当各自的计数器最后输出答案即可。</p><h1 id="b2157-短信计费" tabindex="-1"><a class="header-anchor" href="#b2157-短信计费"><span>B2157 短信计费</span></a></h1><h2 id="题目描述-3" tabindex="-1"><a class="header-anchor" href="#题目描述-3"><span>题目描述</span></a></h2><p>用手机发短信，一条短信资费为 0.1 元，但限定一条短信的内容在 70 个字以内（包括 70 个字）。如果你一次所发送的短信超过了 70 个字，则会按照每 70 个字一条短信的限制把它分割成多条短信发送。假设已经知道你当月所发送的短信的字数，试统计一下你当月短信的总资费。</p><h2 id="输入格式-3" tabindex="-1"><a class="header-anchor" href="#输入格式-3"><span>输入格式</span></a></h2><p>第一行是整数 n，表示当月发送短信的总次数，接着 n 行每行一个整数，表示每次短信的字数。输出格式输出一行，当月短信总资费，单位为元，精确到小数点后 1 位。输入输出</p><h2 id="输出格式-3" tabindex="-1"><a class="header-anchor" href="#输出格式-3"><span>输出格式</span></a></h2><p>输出一行，当月短信总资费，单位为元，精确到小数点后 1 位。</p><h2 id="样例-2" tabindex="-1"><a class="header-anchor" href="#样例-2"><span>样例</span></a></h2><h3 id="样例输入-1-3" tabindex="-1"><a class="header-anchor" href="#样例输入-1-3"><span>样例输入 1</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">10</span>
<span class="line">39</span>
<span class="line">49</span>
<span class="line">42</span>
<span class="line">61</span>
<span class="line">44</span>
<span class="line">147</span>
<span class="line">42</span>
<span class="line">72</span>
<span class="line">35</span>
<span class="line">46</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="样例输出-1-3" tabindex="-1"><a class="header-anchor" href="#样例输出-1-3"><span>样例输出 1</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">1.3</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这个题不难，判断每个数据是不是大于70，如果是的话，我们可以做整除向上取整，这是因为余数的那些字符，也会被当做一次信息发出去进行收费，所以可以归结为数据除以70向上取整数。可以用<strong>ceil</strong>函数来实现。统计了所有的信息数以后，简单的运算就可以直接输出答案。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> n<span class="token punctuation">;</span></span>
<span class="line">    cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> a<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        cin<span class="token operator">&gt;&gt;</span>a<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&lt;=</span><span class="token number">70</span><span class="token punctuation">)</span>  cnt<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&gt;</span><span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">int</span> m<span class="token operator">=</span><span class="token function">ceil</span><span class="token punctuation">(</span>a<span class="token operator">*</span><span class="token number">1.0</span><span class="token operator">/</span><span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//这里数据转换，否则a/70始终是整数。</span></span>
<span class="line">            cnt <span class="token operator">+=</span>m<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">double</span> ans <span class="token operator">=</span>cnt<span class="token operator">*</span><span class="token number">0.1</span><span class="token punctuation">;</span> </span>
<span class="line">    cout<span class="token operator">&lt;&lt;</span>fixed<span class="token operator">&lt;&lt;</span><span class="token function">setprecision</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="b2152-分离整数的各个数" tabindex="-1"><a class="header-anchor" href="#b2152-分离整数的各个数"><span>B2152 分离整数的各个数</span></a></h1><h2 id="题目描述-4" tabindex="-1"><a class="header-anchor" href="#题目描述-4"><span>题目描述</span></a></h2><p>给定一个整数 n，要求从个位开始分离出它的每一位数字。从个位开始按照从低位到高位的顺序依次输出每一位数字。</p><h2 id="输入格式-4" tabindex="-1"><a class="header-anchor" href="#输入格式-4"><span>输入格式</span></a></h2><p>输入一个整数 n （1≤n≤100000000）。输出格式从个位开始按照从低位到高位的顺序依次输出每一位数字。数字之间以一个空格分开。输入输出</p><h2 id="输出格式-4" tabindex="-1"><a class="header-anchor" href="#输出格式-4"><span>输出格式</span></a></h2><p>从个位开始按照从低位到高位的顺序依次输出每一位数字。数字之间以一个空格分开。</p><h2 id="样例-3" tabindex="-1"><a class="header-anchor" href="#样例-3"><span>样例</span></a></h2><h3 id="样例输入-1-4" tabindex="-1"><a class="header-anchor" href="#样例输入-1-4"><span>样例输入 1</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">123</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="样例输出-1-4" tabindex="-1"><a class="header-anchor" href="#样例输出-1-4"><span>样例输出 1</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">3 2 1</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这道题还是对每个数字进行了<strong>遍历各个位数</strong>的操作，我们的取余10是从低位到高位获取的，正常输出即可，可如果是倒序输出呢？</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">int</span> n<span class="token punctuation">;</span></span>
<span class="line">   cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">       cout<span class="token operator">&lt;&lt;</span>n<span class="token operator">%</span><span class="token number">10</span><span class="token operator">&lt;&lt;</span><span class="token string">&quot; &quot;</span><span class="token punctuation">;</span></span>
<span class="line">       n<span class="token operator">/=</span><span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token punctuation">}</span>       <span class="token comment">//思考如何从高位进行输出？</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="" tabindex="-1"><a class="header-anchor" href="#"><span></span></a></h1><h1 id="b2153-求阶乘的和" tabindex="-1"><a class="header-anchor" href="#b2153-求阶乘的和"><span>B2153 求阶乘的和</span></a></h1><h2 id="题目描述-5" tabindex="-1"><a class="header-anchor" href="#题目描述-5"><span>题目描述</span></a></h2><p>给定正整数 n，求不大于 n 的正整数的阶乘的和（即求 1!+2!+3!+⋯+n!），输出阶乘的和。 阶乘定义为 n!=n×(n−1)×(n−2)×⋯×1。例如，5!=5×4×3×2×1=120。</p><h2 id="输入格式-5" tabindex="-1"><a class="header-anchor" href="#输入格式-5"><span>输入格式</span></a></h2><p>输入一行，包含一个正整数 n(1&lt;n&lt;12)。输出格式输出一行，表示阶乘的和。</p><h2 id="输出格式-5" tabindex="-1"><a class="header-anchor" href="#输出格式-5"><span>输出格式</span></a></h2><p>输出一行，表示阶乘的和。</p><h2 id="样例-4" tabindex="-1"><a class="header-anchor" href="#样例-4"><span>样例</span></a></h2><h3 id="样例输入-1-5" tabindex="-1"><a class="header-anchor" href="#样例输入-1-5"><span>样例输入 1</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">5</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="样例输出-1-5" tabindex="-1"><a class="header-anchor" href="#样例输出-1-5"><span>样例输出 1</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">153</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这个题是对n求1的阶乘到n的阶乘的和，注意区别。那么对于求和，可以使用一次循环，每个数字的阶乘进行累加即可，那么内层的数据——$n$!如何计算？题目给出了定义，还是可以用循环来解决！ 对于一个数字$i$只要循环从1一直累乘到$i$即可。所以使用两次循环——外层循环用于计算阶乘的和，内层循环用于计算当前的数字的阶乘。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">int</span> n<span class="token punctuation">;</span></span>
<span class="line">  cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> fac<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  </span>
<span class="line">    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        fac<span class="token operator">*=</span>j<span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      sum<span class="token operator">+=</span>fac<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  cout<span class="token operator">&lt;&lt;</span>sum<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>       </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="-1" tabindex="-1"><a class="header-anchor" href="#-1"><span></span></a></h1><h1 id="b2054-求平均年龄" tabindex="-1"><a class="header-anchor" href="#b2054-求平均年龄"><span>B2054 求平均年龄</span></a></h1><h2 id="题目描述-6" tabindex="-1"><a class="header-anchor" href="#题目描述-6"><span>题目描述</span></a></h2><p>班上有学生若干名，给出每名学生的年龄（整数），求班上所有学生的平均年龄，保留到小数点后两位。输入格式第一行有一个整数 n（1≤n≤100），表示学生的人数。其后 n 行每行有 1 个整数，表示每个学生的年龄，取值为 15 到 25。</p><h2 id="输入格式-6" tabindex="-1"><a class="header-anchor" href="#输入格式-6"><span>输入格式</span></a></h2><p>第一行有一个整数 n（1≤n≤100），表示学生的人数。其后 n 行每行有 1 个整数，表示每个学生的年龄，取值为 15 到 25。</p><h2 id="输出格式-6" tabindex="-1"><a class="header-anchor" href="#输出格式-6"><span>输出格式</span></a></h2><p>输出一行，该行包含一个浮点数，为要求的平均年龄，保留到小数点后两位。</p><h2 id="样例-5" tabindex="-1"><a class="header-anchor" href="#样例-5"><span>样例</span></a></h2><h3 id="样例输入-1-6" tabindex="-1"><a class="header-anchor" href="#样例输入-1-6"><span>样例输入 1</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">2</span>
<span class="line">18</span>
<span class="line">17</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="样例输出-1-6" tabindex="-1"><a class="header-anchor" href="#样例输出-1-6"><span>样例输出 1</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">17.50</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>读题知道是求多个数据的和，只需要用一个变量来累加所有数据就行，注意输出的数据类型和格式即可。所以有了循环，简易的诸如——<strong>n个数读入，然后进行加减的代数运算</strong>的题都可以解决。比如下面几个题就是大同小异的。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">int</span> n<span class="token punctuation">;</span></span>
<span class="line">  cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">int</span> a<span class="token punctuation">,</span>sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">     cin<span class="token operator">&gt;&gt;</span>a<span class="token punctuation">;</span></span>
<span class="line">     sum<span class="token operator">+=</span>a<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">double</span> ans <span class="token operator">=</span>sum<span class="token operator">*</span><span class="token number">1.0</span> <span class="token operator">/</span>n<span class="token punctuation">;</span></span>
<span class="line">    cout<span class="token operator">&lt;&lt;</span>fixed<span class="token operator">&lt;&lt;</span><span class="token function">setprecision</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="b2055-均值" tabindex="-1"><a class="header-anchor" href="#b2055-均值"><span>B2055 均值</span></a></h1><h2 id="题目描述-7" tabindex="-1"><a class="header-anchor" href="#题目描述-7"><span>题目描述</span></a></h2><p>给出一组样本数据，计算其均值。输入格式输入有两行，第一行包含一个整数，表示样本容量 n。 第二行包含 n 个浮点数 ai​，代表各个样本数据。</p><h2 id="输入格式-7" tabindex="-1"><a class="header-anchor" href="#输入格式-7"><span>输入格式</span></a></h2><p>输入有两行，第一行包含一个整数，表示样本容量 n。 第二行包含 n 个浮点数 ai​，代表各个样本数据。</p><h2 id="输出格式-7" tabindex="-1"><a class="header-anchor" href="#输出格式-7"><span>输出格式</span></a></h2><p>输出一行，包含一个浮点数，表示均值。 选手输出与标准输出的相对误差或绝对误差不超过 10−3 即视为正确。输入输出</p><h2 id="样例-6" tabindex="-1"><a class="header-anchor" href="#样例-6"><span>样例</span></a></h2><h3 id="样例输入-1-7" tabindex="-1"><a class="header-anchor" href="#样例输入-1-7"><span>样例输入 1</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">2</span>
<span class="line">1.0 3.0</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="样例输出-1-7" tabindex="-1"><a class="header-anchor" href="#样例输出-1-7"><span>样例输出 1</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">2.0000</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="数据范围" tabindex="-1"><a class="header-anchor" href="#数据范围"><span>数据范围</span></a></h2><p>与约定 对于全部的测试点，保证 1≤n≤100，∣ai​∣≤104。在</p><h2 id="提示" tabindex="-1"><a class="header-anchor" href="#提示"><span>提示</span></a></h2><p>数据规模与约定 对于全部的测试点，保证 1≤n≤100，∣ai​∣≤104。</p><h1 id="-2" tabindex="-1"><a class="header-anchor" href="#-2"><span></span></a></h1><h1 id="b2056-求整数的和与均值" tabindex="-1"><a class="header-anchor" href="#b2056-求整数的和与均值"><span>B2056 求整数的和与均值</span></a></h1><h2 id="题目描述-8" tabindex="-1"><a class="header-anchor" href="#题目描述-8"><span>题目描述</span></a></h2><p>读入 n(1≤n≤10000) 个整数，求它们的和与均值。输入格式输入第一行是一个整数 n，表示有 n 个整数。 第 2∼n+1 行每行包含 1 个整数。每个整数的绝对值均不超过 10000。</p><h2 id="输入格式-8" tabindex="-1"><a class="header-anchor" href="#输入格式-8"><span>输入格式</span></a></h2><p>输入第一行是一个整数 n，表示有 n 个整数。 第 2∼n+1 行每行包含 1 个整数。每个整数的绝对值均不超过 10000。</p><h2 id="输出格式-8" tabindex="-1"><a class="header-anchor" href="#输出格式-8"><span>输出格式</span></a></h2><p>输出一行，先输出和，再输出平均值（保留到小数点后 5 位），两个数间用单个空格分隔。</p><h2 id="样例-7" tabindex="-1"><a class="header-anchor" href="#样例-7"><span>样例</span></a></h2><h3 id="样例输入-1-8" tabindex="-1"><a class="header-anchor" href="#样例输入-1-8"><span>样例输入 1</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">4</span>
<span class="line">344</span>
<span class="line">222</span>
<span class="line">343</span>
<span class="line">222</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="样例输出-1-8" tabindex="-1"><a class="header-anchor" href="#样例输出-1-8"><span>样例输出 1</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">1131 282.75000</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h1 id="-3" tabindex="-1"><a class="header-anchor" href="#-3"><span></span></a></h1><hr><h1 id="b2057-最高的分数" tabindex="-1"><a class="header-anchor" href="#b2057-最高的分数"><span>B2057 最高的分数</span></a></h1><h2 id="题目描述-9" tabindex="-1"><a class="header-anchor" href="#题目描述-9"><span>题目描述</span></a></h2><p>孙老师讲授的《计算概论》这门课期中考试刚刚结束，他想知道考试中取得的最高分数。因为人数比较多，他觉得这件事情交给计算机来做比较方便。你能帮孙老师解决这个问题吗？</p><h2 id="输入格式-9" tabindex="-1"><a class="header-anchor" href="#输入格式-9"><span>输入格式</span></a></h2><p>输入两行，第一行为整数 n（1≤n&lt;100），表示参加这次考试的人数。第二行是这 n 个学生的成绩，相邻两个数之间用单个空格隔开。所有成绩均为 0 到 100 之间的整数。</p><h2 id="输出格式-9" tabindex="-1"><a class="header-anchor" href="#输出格式-9"><span>输出格式</span></a></h2><p>输出一个整数，即最高的成绩。</p><h2 id="样例-8" tabindex="-1"><a class="header-anchor" href="#样例-8"><span>样例</span></a></h2><h3 id="样例输入-1-9" tabindex="-1"><a class="header-anchor" href="#样例输入-1-9"><span>样例输入 1</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">5</span>
<span class="line">85 78 90 99 60</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="样例输出-1-9" tabindex="-1"><a class="header-anchor" href="#样例输出-1-9"><span>样例输出 1</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">99</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这里还是用到了遍历n个数据，那么题目的任务就是找出最大值，我可以初始化一个很小的值（为什么）然后以此与给定数据比较，存入较大的那个，最后输出即可。如果初始化的数据ans很大，比如比数据范围的最大值还要大，那么是不合理的，所有的数据的比较都不会超过他。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> n<span class="token punctuation">;</span></span>
<span class="line">    cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> a<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        cin<span class="token operator">&gt;&gt;</span>a<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&gt;</span>ans<span class="token punctuation">)</span> ans<span class="token operator">=</span>a<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    cout<span class="token operator">&lt;&lt;</span>ans<span class="token punctuation">;</span>       </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="b2058-奥运奖牌计数" tabindex="-1"><a class="header-anchor" href="#b2058-奥运奖牌计数"><span>B2058 奥运奖牌计数</span></a></h1><h2 id="题目描述-10" tabindex="-1"><a class="header-anchor" href="#题目描述-10"><span>题目描述</span></a></h2><p>2008 年北京奥运会，A 国的运动员参与了 n 天的决赛项目 (1≤n≤100)。现在要统计一下 A 国所获得的金、银、铜牌数目及总奖牌数。输入第 1 行是 A 国参与决赛项目的天数 n，其后 n 行，每一行是该国某一天获得的金、银、铜牌数目（不超过 100)。输出 4 个整数，为 A 国所获得的金、银、铜牌总数及总奖牌数。</p><h2 id="输入格式-10" tabindex="-1"><a class="header-anchor" href="#输入格式-10"><span>输入格式</span></a></h2><p>第 1 行是 A 国参与决赛项目的天数 n，其后 n 行，每一行是该国某一天获得的金、银、铜牌数目，以一个空格分开。</p><h2 id="输出格式-10" tabindex="-1"><a class="header-anchor" href="#输出格式-10"><span>输出格式</span></a></h2><p>输出 1 行，包括 4 个整数，为 A 国所获得的金、银、铜牌总数及总奖牌数，以一个空格分开。输入输出</p><h2 id="样例-9" tabindex="-1"><a class="header-anchor" href="#样例-9"><span>样例</span></a></h2><h3 id="样例输入-1-10" tabindex="-1"><a class="header-anchor" href="#样例输入-1-10"><span>样例输入 1</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">3</span>
<span class="line">1 0 3</span>
<span class="line">3 1 0</span>
<span class="line">0 3 0</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="样例输出-1-10" tabindex="-1"><a class="header-anchor" href="#样例输出-1-10"><span>样例输出 1</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">4 4 3 11</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> n<span class="token punctuation">;</span></span>
<span class="line">    cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> A<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>B<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>C<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span> <span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        cin<span class="token operator">&gt;&gt;</span>a<span class="token operator">&gt;&gt;</span>b<span class="token operator">&gt;&gt;</span>c<span class="token punctuation">;</span></span>
<span class="line">        A<span class="token operator">+=</span>a<span class="token punctuation">;</span></span>
<span class="line">        B<span class="token operator">+=</span>b<span class="token punctuation">;</span></span>
<span class="line">        C<span class="token operator">+=</span>c<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span>       </span>
<span class="line">    cout<span class="token operator">&lt;&lt;</span>A<span class="token operator">&lt;&lt;</span><span class="token string">&quot; &quot;</span><span class="token operator">&lt;&lt;</span>B<span class="token operator">&lt;&lt;</span><span class="token string">&quot; &quot;</span><span class="token operator">&lt;&lt;</span>C<span class="token operator">&lt;&lt;</span><span class="token string">&quot; &quot;</span><span class="token operator">&lt;&lt;</span>A<span class="token operator">+</span>B<span class="token operator">+</span>C<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="b2059-奇数求和" tabindex="-1"><a class="header-anchor" href="#b2059-奇数求和"><span>B2059 奇数求和</span></a></h1><h2 id="题目描述-11" tabindex="-1"><a class="header-anchor" href="#题目描述-11"><span>题目描述</span></a></h2><p>计算非负整数 m 到 n（包括 m 和 n）之间的所有奇数的和，其中，m 不大于 n，且 n 不大于 300。例如 m=3,n=12, 其和则为：3+5+7+9+11=35。</p><h2 id="输入格式-11" tabindex="-1"><a class="header-anchor" href="#输入格式-11"><span>输入格式</span></a></h2><p>两个数 m 和 n，两个数以一个空格分开，其中 0≤m≤n≤300。输出格式输出一行，包含一个整数，表示 m 到 n（包括 m 和 n）之间的所有奇数的和。输入输出</p><h2 id="输出格式-11" tabindex="-1"><a class="header-anchor" href="#输出格式-11"><span>输出格式</span></a></h2><p>输出一行，包含一个整数，表示 m 到 n（包括 m 和 n）之间的所有奇数的和。</p><h2 id="样例-10" tabindex="-1"><a class="header-anchor" href="#样例-10"><span>样例</span></a></h2><h3 id="样例输入-1-11" tabindex="-1"><a class="header-anchor" href="#样例输入-1-11"><span>样例输入 1</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">7 15</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="样例输出-1-11" tabindex="-1"><a class="header-anchor" href="#样例输出-1-11"><span>样例输出 1</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">55</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这里涉及到了条件判断，要求的是<strong>奇数的和</strong>，也就是判断当前的数是奇数就可以，借助取余数的运算，对2求余数，整除为0，余1为奇数。那么其实可以推广到对k求余数从（0到k-1）中选择一个为合理的条件来进行求和，也是可以实现的。比如，洛谷还有一道是求和给定区间的17的倍数，那么其实只要条件改为取余17为0即可。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">int</span> m<span class="token punctuation">,</span>n<span class="token punctuation">;</span></span>
<span class="line">   cin<span class="token operator">&gt;&gt;</span>m<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>m<span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        ans<span class="token operator">+=</span>i<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span>          </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="b2060-满足条件的数累加" tabindex="-1"><a class="header-anchor" href="#b2060-满足条件的数累加"><span>B2060 满足条件的数累加</span></a></h1><h2 id="题目描述-12" tabindex="-1"><a class="header-anchor" href="#题目描述-12"><span>题目描述</span></a></h2><p>将正整数 m 和 n 之间（包括 m 和 n) 能被 17 整除的数累加，其中，0&lt;m&lt;n&lt;1000。</p><h2 id="输入格式-12" tabindex="-1"><a class="header-anchor" href="#输入格式-12"><span>输入格式</span></a></h2><p>一行，包含两个整数 m 和 n，其间，以一个空格间隔。输出格式输出一行，包行一个整数，表示累加的结果。输入输出</p><h2 id="输出格式-12" tabindex="-1"><a class="header-anchor" href="#输出格式-12"><span>输出格式</span></a></h2><p>输出一行，包行一个整数，表示累加的结果。</p><h2 id="样例-11" tabindex="-1"><a class="header-anchor" href="#样例-11"><span>样例</span></a></h2><h3 id="样例输入-1-12" tabindex="-1"><a class="header-anchor" href="#样例输入-1-12"><span>样例输入 1</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">50 85</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="样例输出-1-12" tabindex="-1"><a class="header-anchor" href="#样例输出-1-12"><span>样例输出 1</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">204</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">int</span> m<span class="token punctuation">,</span>n<span class="token punctuation">;</span></span>
<span class="line">  cin<span class="token operator">&gt;&gt;</span>m<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>m<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">17</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        ans<span class="token operator">+=</span>i<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"> <span class="token punctuation">}</span>   </span>
<span class="line"> cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面看两道也可以用循环解决的计算题，乘方与增长的问题，本质上都是进行了重复的乘法运算，正确写出每次循环的运算表达式即可。</p><h1 id="b2062-乘方计算" tabindex="-1"><a class="header-anchor" href="#b2062-乘方计算"><span>B2062 乘方计算</span></a></h1><h2 id="题目描述-13" tabindex="-1"><a class="header-anchor" href="#题目描述-13"><span>题目描述</span></a></h2><p>给出一个整数 a 和一个正整数 n，求乘方 an。输入格式一行，包含两个整数 a 和 n。−1000000≤a≤1000000，1≤n≤10000。</p><h2 id="输入格式-13" tabindex="-1"><a class="header-anchor" href="#输入格式-13"><span>输入格式</span></a></h2><p>一行，包含两个整数 a 和 n。−1000000≤a≤1000000，1≤n≤10000。输出格式一个整数，即乘方结果。题目保证最终结果的绝对值不超过 1000000。输入输出</p><h2 id="输出格式-13" tabindex="-1"><a class="header-anchor" href="#输出格式-13"><span>输出格式</span></a></h2><p>一个整数，即乘方结果。题目保证最终结果的绝对值不超过 1000000。</p><h2 id="样例-12" tabindex="-1"><a class="header-anchor" href="#样例-12"><span>样例</span></a></h2><h3 id="样例输入-1-13" tabindex="-1"><a class="header-anchor" href="#样例输入-1-13"><span>样例输入 1</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">2 3</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="样例输出-1-13" tabindex="-1"><a class="header-anchor" href="#样例输出-1-13"><span>样例输出 1</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">8</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h1 id="b2063-人口增长问题" tabindex="-1"><a class="header-anchor" href="#b2063-人口增长问题"><span>B2063 人口增长问题</span></a></h1><h2 id="题目描述-14" tabindex="-1"><a class="header-anchor" href="#题目描述-14"><span>题目描述</span></a></h2><p>假设目前的世界人口有 x 亿，按照每年 0.1% 的增长速度，n 年后将有多少人？输入格式一行两个正整数 x 和 n，之间有一个空格。其中，1≤x≤100,1≤n≤100。</p><h2 id="输入格式-14" tabindex="-1"><a class="header-anchor" href="#输入格式-14"><span>输入格式</span></a></h2><p>一行两个正整数 x 和 n，之间有一个空格。其中，1≤x≤100,1≤n≤100。输出格式一行一个数，表示答案。以亿为单位，保留到小数点后 4 位。输入输出</p><h2 id="输出格式-14" tabindex="-1"><a class="header-anchor" href="#输出格式-14"><span>输出格式</span></a></h2><p>一行一个数，表示答案。以亿为单位，保留到小数点后 4 位。</p><h2 id="样例-13" tabindex="-1"><a class="header-anchor" href="#样例-13"><span>样例</span></a></h2><h3 id="样例输入-1-14" tabindex="-1"><a class="header-anchor" href="#样例输入-1-14"><span>样例输入 1</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">13 10</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="样例输出-1-14" tabindex="-1"><a class="header-anchor" href="#样例输出-1-14"><span>样例输出 1</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">13.1306</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h1 id="b2066-救援" tabindex="-1"><a class="header-anchor" href="#b2066-救援"><span>B2066 救援</span></a></h1><h2 id="题目描述-15" tabindex="-1"><a class="header-anchor" href="#题目描述-15"><span>题目描述</span></a></h2><p>救生船从大本营出发，营救若干屋顶上的人回到大本营，屋顶数目以及每个屋顶的坐标。 和人数都将由输入决定，求出所有人都到达大本营并登陆所用的时间。 在直角坐标系的原点是大本营，救生船每次从大本营出发，救了人之后将人送回大本营。坐标系中的点代表屋顶，每个屋顶由其位置坐标和其上的人数表示。救生船每次从大本营出发，以速度 50 米 / 分钟驶向下一个屋顶，达到一个屋顶后，救下其上的所有人，每人上船 1 分钟，船原路返回，达到大本营，每人下船 0.5 分钟。假设原点与任意一个屋顶的连线不穿过其它屋顶。</p><h2 id="输入格式-15" tabindex="-1"><a class="header-anchor" href="#输入格式-15"><span>输入格式</span></a></h2><p>第一行，一个整数，表示屋顶数 n。 接下来依次有 n 行输入，每一行上包含两个表示屋顶相对于大本营的平面坐标位置的实数（单位是米）、一个表示人数的整数，数之间以一个空格分开。</p><h2 id="输出格式-15" tabindex="-1"><a class="header-anchor" href="#输出格式-15"><span>输出格式</span></a></h2><p>一行，救援需要的总时间，精确到分钟（向上取整）。</p><h2 id="样例-14" tabindex="-1"><a class="header-anchor" href="#样例-14"><span>样例</span></a></h2><h3 id="样例输入-1-15" tabindex="-1"><a class="header-anchor" href="#样例输入-1-15"><span>样例输入 1</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">1</span>
<span class="line">30 40 3</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="样例输出-1-15" tabindex="-1"><a class="header-anchor" href="#样例输出-1-15"><span>样例输出 1</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">7</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这个题对运算进行了一些改动，对于每一个点，先计算往返的时间，再根据人数计算上下船的时间，所以对每一次的数据读入，可以计算一个总时间的公式，然后循环依次输出结果。</p><hr><h1 id="b2064-斐波那契数列" tabindex="-1"><a class="header-anchor" href="#b2064-斐波那契数列"><span>B2064 斐波那契数列</span></a></h1><h2 id="题目描述-16" tabindex="-1"><a class="header-anchor" href="#题目描述-16"><span>题目描述</span></a></h2><p>斐波那契数列是指这样的数列：数列的第一个和第二个数都为 1，接下来每个数都等于前面 2 个数之和。 给出一个正整数 a，要求斐波那契数列中第 a 个数是多少。</p><h2 id="输入格式-16" tabindex="-1"><a class="header-anchor" href="#输入格式-16"><span>输入格式</span></a></h2><p>第 1 行是测试数据的组数 n，后面跟着 n 行输入。每组测试数据占 1 行，包括一个正整数 a（1≤a≤30）。</p><h2 id="输出格式-16" tabindex="-1"><a class="header-anchor" href="#输出格式-16"><span>输出格式</span></a></h2><p>输出有 n 行，每行输出对应一个输入。输出应是一个正整数，为斐波那契数列中第 a 个数的大小。输入输出</p><h2 id="样例-15" tabindex="-1"><a class="header-anchor" href="#样例-15"><span>样例</span></a></h2><h3 id="样例输入-1-16" tabindex="-1"><a class="header-anchor" href="#样例输入-1-16"><span>样例输入 1</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">4</span>
<span class="line">5</span>
<span class="line">2</span>
<span class="line">19</span>
<span class="line">1</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="样例输出-1-16" tabindex="-1"><a class="header-anchor" href="#样例输出-1-16"><span>样例输出 1</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">5</span>
<span class="line">1</span>
<span class="line">4181</span>
<span class="line">1</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是一个经典的斐波那契数列问题，先定义初始值为1,1；那么从$i$=3开始，$a_i$ 为前两项之和。如何用循环来实现？可以使用两个值a,b；每次来存取循环变量递增以后的值。不过n不能太大，否则会超出内存。</p><h1 id="b2067-药房管理" tabindex="-1"><a class="header-anchor" href="#b2067-药房管理"><span>B2067 药房管理</span></a></h1><h2 id="题目描述-17" tabindex="-1"><a class="header-anchor" href="#题目描述-17"><span>题目描述</span></a></h2><p>对药品的管理是其中的一项重要内容。现在药房的管理员希望使用计算机来帮助他管理。假设对于任意一种药品，每天开始工作时的库存总量已知，并且一天之内不会通过进货的方式增加。每天会有很多病人前来取药，每个病人希望取走不同数量的药品。如果病人需要的数量超过了当时的库存量，药房会拒绝该病人的请求。管理员希望知道每天会有多少病人没有取上药。</p><h2 id="输入格式-17" tabindex="-1"><a class="header-anchor" href="#输入格式-17"><span>输入格式</span></a></h2><p>共 3 行，第一行是每天开始时的药品总量 m。 第二行是这一天取药的人数 n(0&lt;n≤100)。 第三行共有 n 个数，分别记录了每个病人希望取走的药品数量（按照时间先后的顺序）。</p><h2 id="输出格式-17" tabindex="-1"><a class="header-anchor" href="#输出格式-17"><span>输出格式</span></a></h2><p>只有 1 行，为这一天没有取上药品的人数。</p><h2 id="样例-16" tabindex="-1"><a class="header-anchor" href="#样例-16"><span>样例</span></a></h2><h3 id="样例输入-1-17" tabindex="-1"><a class="header-anchor" href="#样例输入-1-17"><span>样例输入 1</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">30</span>
<span class="line">6</span>
<span class="line">10 5 20 6 7 8</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="样例输出-1-17" tabindex="-1"><a class="header-anchor" href="#样例输出-1-17"><span>样例输出 1</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">2</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,273)]))}const r=s(l,[["render",i]]),o=JSON.parse('{"path":"/basic-syntax/loop-structure/%E5%BE%AA%E7%8E%AF%E5%85%A5%E9%97%A8%E9%A2%98.html","title":"循环语言入门题","lang":"zh-CN","frontmatter":{},"git":{},"filePathRelative":"basic-syntax/loop-structure/循环入门题.md"}');export{r as comp,o as data};
